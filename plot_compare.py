import os
import matplotlib.pyplot as plt
import numpy as np
import random

# 指定包含文件的目录路径
directory_path = "figures_data/cifar100_compare" # "local_debug/debug"
# "figures_data/mnist_loss_mlp10"

def new_x(timestamp):
    cumulative_sum = []
    current_sum = 0
    for num in timestamp:
        current_sum += num
        cumulative_sum.append(current_sum)
    return cumulative_sum

timestamp8_rq = new_x([0.4171875161186273, 0.4172974751338197, 0.4060424995980484, 0.41495150309131545, 0.4069673537941107, 0.40058531921617974, 0.4057148658019152, 0.39969330927561936, 0.39774572208406983, 0.39440136800942305, 0.3944389889016219, 0.3904625713032834, 0.3876482055112445, 0.3888809740690373, 0.3817001772400502, 0.38744446925654413, 0.38101131438068114, 0.38383312335258607, 0.3764228072785491, 0.3748803546674751, 0.37765677070417475, 0.37308555943738547, 0.37100402305092217, 0.36885479180978203, 0.3642118811333481, 0.36606813627012175, 0.3613846115601218, 0.3568263434663603, 0.3547820533910441, 0.3530278383448951, 0.3475436788693055, 0.3528037465854113, 0.36175234311826016, 0.3441556765831604, 0.3403722267471382, 0.3407886814141799, 0.33556771990964884, 0.33309742882848475, 0.32753495854893594, 0.3297255362430795, 0.3331106849619136, 0.33806652483419625, 0.33598952814177513, 0.3381973481603789, 0.34182551244134024, 0.34852234399762666, 0.34952747768051706, 0.35328271098296776, 0.3536888122537335, 0.3593146016288951])
timestamp8_rb = new_x([0.5232577766917886, 0.491643822536898, 0.48114157908356997, 0.4976722359106436, 0.49370244607819114, 0.489239884057607, 0.5119530486689342, 0.5076546197485979, 0.519437383358834, 0.508806885892762, 0.519413203270963, 0.49617882239672, 0.4907312484780873, 0.49146523153154487, 0.49642649154041213, 0.486972408436332, 0.5077350006367308, 0.48798420386306046, 0.49531874508228485, 0.49478521305536677, 0.502811169212707, 0.4863198933408029, 0.4874734536384397, 0.5166511824995975, 0.4532398565062267, 0.4851448416580335, 0.48206422022256445, 0.4635811464673834, 0.48540491655841056, 0.4871535693871321, 0.5007887340284448, 0.4630744511371085, 0.4843084376225045, 0.4454324249354293, 0.44555632670984135, 0.48995740780295927, 0.4949427716524477, 0.4841563608457201, 0.5183307579944295, 0.49065640986882847, 0.4744119681400682, 0.4930679124249192, 0.4970384760461406, 0.5208064464820653, 0.4911691272239191, 0.5137161726326863, 0.4892099867540103, 0.49489007033869054, 0.5123889707349361, 0.501437469005824])
# timestamp12 = new_x([0.3741406739894705, 0.3724698083955147, 0.3708015526762601, 0.36913528797270173, 0.36747036249065956, 0.3658060876296357, 0.36414173357372637, 0.3624765242498248, 0.3608096315381956, 0.359140168595263, 0.35746718211664885, 0.3557896433281208, 0.3541064374404752, 0.3524163512378123, 0.35071805838211345, 0.34901010190347204, 0.3472908731948863, 0.34555858662911654, 0.34381124864245954, 0.34204661975672024, 0.34026216749215266, 0.33845500739430745, 0.33662182835479226, 0.3347587968909794, 0.3328614328096365, 0.3309244453030515, 0.3289415133305068, 0.3269049859634164, 0.3248054652078105, 0.32263121210986345, 0.3203672803637563, 0.3179942190644045, 0.3154860800071472, 0.3128072988566574, 0.3099078632812426, 0.30671681319688143, 0.30314183822934593, 0.2991526668427107, 0.29560718987075646, 0.29617695448474846, 0.29997727957139775, 0.30384853063127537, 0.30730675860386597, 0.31040996085267036, 0.31324334100703793, 0.31587091181503735, 0.3183380752076742, 0.32067743019939715, 0.3229129771770932, 0.32506284751071113])
timestamp8 = new_x([0.47653007258929925, 0.47572203275198666, 0.4700882488067441, 0.46646899753527754, 0.4623824187962282, 0.4596540940610298, 0.4561863315915752, 0.45158757159385315, 0.44889628982013147, 0.44619437911737414, 0.44231611543841, 0.43852665072753283, 0.4356259956606256, 0.43129742994943054, 0.4289780895843996, 0.4246719098927951, 0.42406891560080934, 0.4184965975811979, 0.41580316468307765, 0.4108594739484662, 0.4079051923415538, 0.40483482291958656, 0.4012870943521302, 0.39801891239485243, 0.3943384812754097, 0.38982555491683063, 0.3864382435950869, 0.3827963193052006, 0.378806261515264, 0.37567744208222426, 0.37051973137266075, 0.3653596921371636, 0.35988634685158655, 0.35589412285185545, 0.3519674300367103, 0.35087986362790347, 0.35516692329447547, 0.36045692500646703, 0.36477746093656954, 0.36988980731945953, 0.3734254621092152, 0.3783830137710635, 0.3823889680898335, 0.3856771804748799, 0.3902255264783912, 0.39335252623329914, 0.39775555072622887, 0.40130777270382817, 0.40493304112402606, 0.4084358397554901])
time = [timestamp8,timestamp8_rb,timestamp8_rq]
label_list = ['DRL-VQFL', 'RBA', 'RQA'] # r'$RQA$',r
files = ['8_bit_2.txt', '8_bit_1.txt', '8_bit_num3.txt'] #'9_bit.txt',
# 自定义排序函数，按照文件名中的数字部分进行排序

def loss_nozerotrust(path):
    # 获取目录下的所有文件
    # files = sorted(os.listdir(directory_path))  # 对文件名进行排序
    # 初始化一个列表来存储所有的曲线数据
    all_data = []
    i=0
    # 循环读取每个文件的数据并存储到all_data列表中
    fig, ax = plt.subplots(figsize=(8, 6))
    for file in files:
        file_path = os.path.join(directory_path, file)
        # legend_label = os.path.splitext(file)[0]  # 使用文件名作为legend标签
        legend_label = label_list[i]
        data = np.loadtxt(file_path)
        if i == 0:
            marker = 'o'
        elif i == 1:
            marker = 's'
        elif i == 2:
            marker = 'x'
        plt.plot(time[i], data, label=legend_label,marker=marker, markevery=5,markersize=10,markerfacecolor='none')
        i+=1

    # 显示图形
    ax.set_xlabel("Latency (s)", fontsize=16)
    ax.set_ylabel("Training Loss", fontsize=16)  # Testing Accuracy, Training Loss
    ax.tick_params(axis='x', labelsize=12)
    ax.tick_params(axis='y', labelsize=12)
    ax.legend(fontsize=14)  # 显示legend标签
    plt.grid(True)
    plt.savefig('save/cifar100_algorithm_compare.png')  # 保存为PNG格式图片
    plt.show()

loss_nozerotrust(directory_path)